{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "cbf0c9d3-390e-4113-a7fc-eba4c9d554ba",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "        <iframe\n",
       "            width=\"100%\"\n",
       "            height=\"650\"\n",
       "            src=\"http://127.0.0.1:8050/\"\n",
       "            frameborder=\"0\"\n",
       "            allowfullscreen\n",
       "            \n",
       "        ></iframe>\n",
       "        "
      ],
      "text/plain": [
       "<IPython.lib.display.IFrame at 0x15bcd7b90>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "import pandas as pd\n",
    "import plotly.express as px\n",
    "import dash\n",
    "from dash import dcc, html\n",
    "import dash.dependencies as dd\n",
    "from dash.exceptions import PreventUpdate\n",
    "import base64\n",
    "from dash import Input, Output\n",
    "\n",
    "# Creating the dataset manually\n",
    "world_cup_data = [\n",
    "    {\"Year\": 1930, \"Winner\": \"Uruguay\", \"Runner-up\": \"Argentina\"},\n",
    "    {\"Year\": 1934, \"Winner\": \"Italy\", \"Runner-up\": \"Czechoslovakia\"},\n",
    "    {\"Year\": 1938, \"Winner\": \"Italy\", \"Runner-up\": \"Hungary\"},\n",
    "    {\"Year\": 1950, \"Winner\": \"Uruguay\", \"Runner-up\": \"Brazil\"},\n",
    "    {\"Year\": 1954, \"Winner\": \"Germany\", \"Runner-up\": \"Hungary\"},\n",
    "    {\"Year\": 1958, \"Winner\": \"Brazil\", \"Runner-up\": \"Sweden\"},\n",
    "    {\"Year\": 1962, \"Winner\": \"Brazil\", \"Runner-up\": \"Czechoslovakia\"},\n",
    "    {\"Year\": 1966, \"Winner\": \"England\", \"Runner-up\": \"Germany\"},\n",
    "    {\"Year\": 1970, \"Winner\": \"Brazil\", \"Runner-up\": \"Italy\"},\n",
    "    {\"Year\": 1974, \"Winner\": \"Germany\", \"Runner-up\": \"Netherlands\"},\n",
    "    {\"Year\": 1978, \"Winner\": \"Argentina\", \"Runner-up\": \"Netherlands\"},\n",
    "    {\"Year\": 1982, \"Winner\": \"Italy\", \"Runner-up\": \"Germany\"},\n",
    "    {\"Year\": 1986, \"Winner\": \"Argentina\", \"Runner-up\": \"Germany\"},\n",
    "    {\"Year\": 1990, \"Winner\": \"Germany\", \"Runner-up\": \"Argentina\"},\n",
    "    {\"Year\": 1994, \"Winner\": \"Brazil\", \"Runner-up\": \"Italy\"},\n",
    "    {\"Year\": 1998, \"Winner\": \"France\", \"Runner-up\": \"Brazil\"},\n",
    "    {\"Year\": 2002, \"Winner\": \"Brazil\", \"Runner-up\": \"Germany\"},\n",
    "    {\"Year\": 2006, \"Winner\": \"Italy\", \"Runner-up\": \"France\"},\n",
    "    {\"Year\": 2010, \"Winner\": \"Spain\", \"Runner-up\": \"Netherlands\"},\n",
    "    {\"Year\": 2014, \"Winner\": \"Germany\", \"Runner-up\": \"Argentina\"},\n",
    "    {\"Year\": 2018, \"Winner\": \"France\", \"Runner-up\": \"Croatia\"},\n",
    "    {\"Year\": 2022, \"Winner\": \"Argentina\", \"Runner-up\": \"France\"},\n",
    "]\n",
    "\n",
    "# Convert to DataFrame\n",
    "df = pd.DataFrame(world_cup_data)\n",
    "\n",
    "# Count the number of wins per country\n",
    "win_counts = df['Winner'].value_counts().reset_index()\n",
    "win_counts.columns = ['Country', 'Wins']\n",
    "\n",
    "# Dash app setup\n",
    "app = dash.Dash(__name__)\n",
    "\n",
    "app.layout = html.Div([\n",
    "    html.H1(\"FIFA World Cup Winners Dashboard\"),\n",
    "    \n",
    "    # Country Dropdown\n",
    "    dcc.Dropdown(\n",
    "        id='country-dropdown',\n",
    "        options=[{'label': 'All Countries', 'value': 'All'}] +\n",
    "                [{'label': country, 'value': country} for country in win_counts['Country']],\n",
    "        value='All',\n",
    "        placeholder='Select a country'\n",
    "    ),\n",
    "    \n",
    "    # Year Dropdown\n",
    "    dcc.Dropdown(\n",
    "        id='year-dropdown',\n",
    "        options=[{'label': 'All Years', 'value': 'All'}] +\n",
    "                [{'label': str(year), 'value': year} for year in df['Year']],\n",
    "        value='All',\n",
    "        placeholder='Select a year'\n",
    "    ),\n",
    "    \n",
    "    # Output for country win count\n",
    "    html.Div(id='country-output', style={'font-size': '20px', 'margin-top': '20px'}),\n",
    "    \n",
    "    # Output for winner/runner-up information\n",
    "    html.Div(id='year-output', style={'font-size': '20px', 'margin-top': '20px'}),\n",
    "    \n",
    "    # Choropleth Map\n",
    "    dcc.Graph(id='choropleth-map')\n",
    "])\n",
    "\n",
    "# Callback to update the choropleth map based on selected country\n",
    "@app.callback(\n",
    "    dd.Output('choropleth-map', 'figure'),\n",
    "    [dd.Input('country-dropdown', 'value')]\n",
    ")\n",
    "def update_map(selected_country):\n",
    "    display_data = win_counts.copy()\n",
    "    \n",
    "    if selected_country != 'All':\n",
    "        display_data['Wins'] = display_data.apply(\n",
    "            lambda row: row['Wins'] if row['Country'] == selected_country else 0.5, axis=1\n",
    "        )\n",
    "    \n",
    "    fig = px.choropleth(\n",
    "        display_data,\n",
    "        locations='Country',\n",
    "        locationmode='country names',\n",
    "        color='Wins',\n",
    "        title='FIFA World Cup Wins by Country',\n",
    "        color_continuous_scale='Blues',\n",
    "        range_color=[0, display_data['Wins'].max()]\n",
    "    )\n",
    "    return fig\n",
    "\n",
    "# Callback to update the winner and runner-up information based on selected year\n",
    "@app.callback(\n",
    "    dd.Output('year-output', 'children'),\n",
    "    [dd.Input('year-dropdown', 'value')]\n",
    ")\n",
    "def update_year_output(selected_year):\n",
    "    if selected_year and selected_year != 'All':\n",
    "        match = df[df['Year'] == selected_year]\n",
    "        if not match.empty:\n",
    "            match = match.iloc[0]\n",
    "            return f\"In {selected_year}, the winner was {match['Winner']} and the runner-up was {match['Runner-up']}\"\n",
    "        else:\n",
    "            return \"No data available for the selected year.\"\n",
    "    return \"Select a year to see the winner and runner-up.\"\n",
    "\n",
    "# Callback to update the country win count\n",
    "@app.callback(\n",
    "    dd.Output('country-output', 'children'),\n",
    "    [dd.Input('country-dropdown', 'value')]\n",
    ")\n",
    "def update_country_output(selected_country):\n",
    "    if selected_country and selected_country != 'All':\n",
    "        wins = win_counts[win_counts['Country'] == selected_country]['Wins'].values\n",
    "        if len(wins) > 0:\n",
    "            return f\"{selected_country} has won the World Cup {wins[0]} times.\"\n",
    "        else:\n",
    "            return f\"{selected_country} has never won the World Cup.\"\n",
    "    return \"\"\n",
    "\n",
    "# Run the app\n",
    "if __name__ == '__main__':\n",
    "    app.run_server(debug=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9eba0937-112d-4303-b93f-61f08fbbf483",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
